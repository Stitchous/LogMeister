using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;

using Microsoft.Practices.Prism.Modularity;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.Prism.UnityExtensions;
using Microsoft.Practices.Unity;

using Xceed.Wpf.AvalonDock.Layout;

namespace LogMeister.Infrastructure
{
    public class LayoutDocumentPaneRegionAdapter[T, U] : RegionAdapterBase.[T] 
        where T : LayoutDocumentPane
        where U : LayoutDocument, new()
    {
        public this(regionBehaviorFactory : IRegionBehaviorFactory)
        {
            base(regionBehaviorFactory)
        }
        
        protected override Adapt(region : IRegion, regionTarget : T) : void 
        {
            region.Views.CollectionChanged += 
            (_, e) =>
            {
                match(e.Action)
                {
                    | NotifyCollectionChangedAction.Add => 
                        foreach(view in e.NewItems)
                        {
                            AddViewToPane(view, regionTarget)
                        }
                    | _ => ()
                }
            }
        }
      
    protected override CreateRegion() : IRegion
    {
        def region = SingleActiveRegion();
        region
    }
    
    private AddViewToPane(view : object, pane : T) : void
    {
        def attr = view.GetType().GetCustomAttributes(typeof(ModuleMetaInfoAttribute), false).SingleOrDefault();
        def title = if(attr == null) "Title" else (attr :> ModuleMetaInfoAttribute).Name;
        
        mutable u = U() <- { Content = view; Title = title; };
        pane.Children.Add(u);
    }
  }
}
