using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Diagnostics;

using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.ServiceLocation;

namespace LogMeister.Infrastructure
{
    public class AvalonRegion : DependencyObject
    {
        [DependencyProperty(IsAttached, Metadata = PropertyMetadata(OnNameChanged))]
        public static GetName(f : DependencyObject) : string;

        private static OnNameChanged(d : DependencyObject, e : DependencyPropertyChangedEventArgs )  : void 
        {
            def CreateRegion(element, regionName)
            {
                def mappings = ServiceLocator.Current.GetInstance.[RegionAdapterMappings]();
                def adapter = mappings.GetMapping(element.GetType());
                _ = adapter.Initialize(element, regionName);
            }
            
            def newValue = e.NewValue :> string;
            when (d != null && newValue != null)
                CreateRegion(d, newValue);
        }
    }
}
