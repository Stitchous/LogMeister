using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Threading;

using Nemerle.Extensions;

using LogMeister.Module.Core;
using LogMeister.Infrastructure;
using LogMeister.LogView;

namespace LogMeister.Module.FileInfo
{
    [NotifyPropertyChanged]
    public class FileInfoViewModel
    {
        public this(documentManager : Document.DocumentManager, timeIndex : TimeIndex)
        {
            def start = DateTime.Now;
            
            def Update(logInfo)
            {
                when (StartTime == TimeSpan())
                {
					def time = _timeIndex.StartTime;
					StartTime = TimeSpan(0, time.Hours, time.Minutes, time.Seconds)
				}
                LineCount = logInfo.ProcessedLineCount : int;
                LinePerSecond = ((LineCount / (DateTime.Now - start).TotalMilliseconds) * 1000) :> int;
                EndTime = _timeIndex.EndTime;
            }
            
            documentManager.CurrentDocumentChanged +=
                (_, doc) =>
                {
                    StartTime = TimeSpan();
                    def logInfo = doc.Value.LogInfo;
                    FullPath = logInfo.FullPath;
                    Header   = logInfo.Header;
                    _timer = WeakDispatcherTimer((_, _) => Update(logInfo),
                        TimeSpan.FromSeconds(1));
                    _timeIndex = timeIndex;
                    logInfo.Loaded += (_, _) =>  { Update(logInfo); _timer.Stop(); }
                }
        }

        public FullPath : string { get; private set; }

        public Header : string { get; private set; }
        
        public LineCount : int { get; private set; }
        
        public LinePerSecond : int { get; private set; }
        
        public StartTime : TimeSpan { get; private set; }
        
        public EndTime : TimeSpan { get; private set; }
        
        private mutable _timer : WeakDispatcherTimer;
        private mutable _timeIndex : TimeIndex;
    }
}
