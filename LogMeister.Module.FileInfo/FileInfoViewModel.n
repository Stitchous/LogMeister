using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Threading;

using Nemerle.Extensions;

using LogMeister.Module.Core;

namespace LogMeister.Module.FileInfo
{
	public class WeakDispatcherTimer
	{
	    public this(original : EventHandler, interval : TimeSpan)
	    {
	        _original = original;
	        _timer = DispatcherTimer() <- ( Interval = interval );
	        _timer.Tick += ProcessTick(WeakReference(this), _, _);
	        _timer.Start();
	    }
	    
	    public Stop() : void { _timer.Stop(); }
	    
	    private static ProcessTick(self : WeakReference, sender : object, args : EventArgs) : void
	    {
	        def selfHardreference = self.Target;
	        if (selfHardreference != null)
				(selfHardreference :> WeakDispatcherTimer)._original(sender, args);
			else
			    (sender :> DispatcherTimer).Stop();
	    }
	    
	    private _timer : DispatcherTimer;
	    private _original : EventHandler;
	}
	
    [NotifyPropertyChanged]
    public class FileInfoViewModel
    {
        public this(logInfo : ILogInfo)
        {
            _logInfo = logInfo;
            _timer = WeakDispatcherTimer( (_,_) => Count = logInfo.ProcessedLineCount :> int, TimeSpan.FromSeconds(1) );
            _logInfo.Loaded += (_, _) => _timer.Stop();
        }

        public FullPath : string { get { _logInfo.FullPath }}

        public Header : string { get { _logInfo.Header }}
        
        public Count : int { get; private set; }
        
        private _logInfo : ILogInfo;
        private _timer : WeakDispatcherTimer;
    }
}
