using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;


using Lucene.Net.Analysis;
using Lucene.Net.Documents;
using Lucene.Net.Index;
using Lucene.Net.QueryParsers;
using Lucene.Net.Search;
using Lucene.Net.Store;
using Lucene.Net.Util;

using LogMeister.Module.Core;
using System.Threading.Tasks;
using Lucene.Net.Analysis.Standard;

namespace LogMeister.Index
{
    internal class Indexer: IIndexedLineConsumer, ISearchService
    {
        public this()
        {
            _directory   = Lazy(() => RAMDirectory());
            _indexWriter = Lazy(
                () => IndexWriter(_directory.Value, Analyzer, IndexWriter.MaxFieldLength.LIMITED));            
        }
 
        public Search(searchTerm : string)  : IEnumerable[int]
        {
            def parser = QueryParser(Version.LUCENE_30, "text", Analyzer);
            
            def query = parser.Parse(searchTerm);
            
            def hitsPerPage = 10000;
            def reader = IndexReader.Open(this.Directory, true);
            
            def searcher = IndexSearcher(reader);
            def collector = TopScoreDocCollector.Create(hitsPerPage, true);
            searcher.Search(query, collector);
            
            collector.TopDocs().ScoreDocs.Select(s => 
                {
                    def doc = searcher.Doc(s.Doc);
                    int.Parse(doc.Get("index"))
                    
                }).ToList()
        }
        
        public Process(line : ILine, index : int) : void
        {
            def message = line.Message;
            def doc = Document();
            doc.Add(Field("index", index.ToString(), Field.Store.YES, Field.Index.NO));            
            doc.Add(Field("text",  message, Field.Store.YES, Field.Index.ANALYZED));
            _indexWriter.Value.AddDocument(doc);

        }
        
        public Finish() : void
        {
            _indexWriter.Value.Dispose();
            _indexWriter =  Lazy(
                () => 
                {
                	_directory =  Lazy(() => RAMDirectory());
                	IndexWriter(_directory.Value, Analyzer, IndexWriter.MaxFieldLength.LIMITED)
                });            
        }
        
        private Directory : Lucene.Net.Store.Directory
        {
            get { _directory.Value; }
        }
        
        private static Analyzer : Analyzer
        {
            get { StandardAnalyzer(Version.LUCENE_30) }
        }
        
        private mutable _indexWriter: Lazy[IndexWriter];
        private mutable _directory  : Lazy[Lucene.Net.Store.Directory];
    }
}
