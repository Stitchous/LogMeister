using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Core
{
class SplitedLineReader: IDisposable
{
    public this(filename : string)
    {
        def FindHeaderEnd(start = 0, hasEmptyLines = false)
        {
            match (FindCRLFPosition(start))
            {
                | Some(position) =>
                    if (position == start)
                        if (hasEmptyLines)
                            Some(position + 2)
                        else
                            FindHeaderEnd(position + 2, true)
                    else
                       FindHeaderEnd(position + 2)
                | _ => None()
            }
        }
                   
        _stream = File.OpenRead(filename);
        
        when (!TryReadBuffer())
            throw FileLoadException("Empty file");
            
        match (FindHeaderEnd(0))
        {
            | Some(position) =>
                _startOfLines  = position;
                Header = Encoding.UTF8.GetString(_buffer, 0, position)
            | _ => throw FileLoadException("Cannot find header in file")
        }
    }
    
    public Header : string { get; private set; }
    
    public BaseStream : Stream { get { _stream } }
    
    public Dispose() : void
    {
        _stream.Dispose();
    }
    
    public GetEnumerator() : IEnumerator[Line]
    {
        def ReadLines(position = _startOfLines, fileOffset = 0l)
        {
            match (FindEndOfLine(position + MinimalHeadeLength))
            {
                | Some(lineEndPosition) => 
                    yield CreateLine(position, lineEndPosition, fileOffset); 
                    ReadLines(lineEndPosition + 2, fileOffset)
                | _ =>
                    Array.Copy(_buffer, position, _buffer, 0, _dataLength - position);
                    def newfileOffset = fileOffset + position:long;
                    if (TryReadBuffer(_dataLength - position))
                        ReadLines(0, newfileOffset)
                    else
                        yield CreateLine(0, _dataLength - 2, newfileOffset);
            }
        }
        
        if (IsLineBegin(_startOfLines))
            ReadLines()
        else
            throw FileLoadException("Cannot find first line at " + _startOfLines)
    }
    
    public ReadLineAt(offset : long) : Line
    {
        _  = _stream.Seek(offset, SeekOrigin.Begin);
        if (TryReadBuffer())
            CreateLine(0, FindEndOfLine(MinimalHeadeLength).Value, offset);
        else
            throw FileLoadException("Cannot read from offset " + offset);
    }
           
    private TryReadBuffer(offset = 0) : bool
    {               
        def read = _stream.Read(_buffer, offset, _buffer.Length - offset);
        _dataLength = read + offset;
        read != 0
    }
    
    private FindPosition(value : byte, startFrom : int) : option[int]
    {
        if (startFrom < _dataLength)
            if (_buffer[startFrom] == value)
                Some(startFrom)
            else
                FindPosition(value, startFrom + 1)
        else
            None()
    }
    
    private FindCRLFPosition(startFrom : int) : option[int]
    {
        match (FindPosition(CRByte, startFrom))
        {
            | Some(position) when position + 1 < _dataLength => 
                if (_buffer[position + 1] == LFByte) 
                    Some(position) 
                else 
                    FindCRLFPosition(position + 2)
            | _ => None()
        }
    }
    
    private CreateLine(startPosition : int, endPosition : int, fileOffset : long) : Line
    {
        def timespan = TimeSpan( 0, 
                                int.Parse(Encoding.UTF8.GetString(_buffer, startPosition, 2)),
                                int.Parse(Encoding.UTF8.GetString(_buffer, startPosition + 3, 2)),
                                int.Parse(Encoding.UTF8.GetString(_buffer, startPosition + 6, 2)),
                                int.Parse(Encoding.UTF8.GetString(_buffer, startPosition + 9, 3)));
                                    
        def threadIdEnd = FindPosition(TabByte, startPosition + 14).Value;
                                    
        Line(timespan,
                Encoding.UTF8.GetString(_buffer, startPosition + 13, threadIdEnd - startPosition - 13),
                Encoding.UTF8.GetString(_buffer, threadIdEnd + 1, 3),
                [], //TODO
                Encoding.UTF8.GetString(_buffer, threadIdEnd + 1 + 3 + 1, endPosition - threadIdEnd - 1 - 3 - 1), 
                fileOffset + startPosition:long)
    }
        
    private FindEndOfLine(position : int) : option[int]
    {
        match (FindCRLFPosition(position))
        {
            | Some(lineEndPosition) when IsLineBegin(lineEndPosition + 2) => Some(lineEndPosition)
            | Some(lineEndPosition) => FindEndOfLine(lineEndPosition + 2)
            | _ => None()
        }
    }
    
    private IsLineBegin(position : int) : bool
    {
        position + MinimalHeadeLength  < _dataLength &&
        _buffer[position + 2] == ColonByte &&
        _buffer[position + 5] == ColonByte &&
        _buffer[position + 8] == DotByte && 
        _buffer[position + 12] == TabByte &&
        _buffer[position + 13] == ZeroByte &&
        _buffer[position + 14] == XByte
    }
         
    private _stream : Stream;
    private _buffer : array[byte] = array(64 * 1024); //has to be more than max string length
    private _startOfLines : int;
    private mutable _dataLength = 0;
    
    private static ColonByte = Convert.ToByte(':');
    private static DotByte = Convert.ToByte('.');
    private static TabByte = Convert.ToByte('\t');
    private static ZeroByte = Convert.ToByte('0');
    private static XByte = Convert.ToByte('x');
    private static CRByte :byte = 0xd;
    private static LFByte :byte = 0xa;
    private static MinimalHeadeLength = 22;
}
}
