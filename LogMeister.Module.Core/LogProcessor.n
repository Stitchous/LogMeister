using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Nemerle.Collections;
using Nemerle.Assertions;

namespace LogMeister.Module.Core
{
    public class LogProcessor : IIndexedLineProvider, ILogInfo, IDisposable
    {
        public this([NotNullOrEmpty] filePath : string, 
                    [NotNull] lineConsumers : IEnumerable[ILineConsumer], 
                    [NotNull] indexedLineCosubers : IEnumerable[IIndexedLineConsumer])
        {
            Loaded += (_, _) => {};
            FullPath = filePath;
            _lineConsumers = lineConsumers;
            _indexedLineConsumers = indexedLineCosubers;            
            _sequentalLogReader = SequentalLogReader(FullPath);
            _lineIndex = LineIndex();
            _indexedLogReader = IndexedLogReader(_lineIndex, FullPath);            
            Header = _sequentalLogReader.Header;
            FileSize = _sequentalLogReader.FileSize;
            
            LoadAsync();
        }
        
        public GetLine(index : int) : ILine
        {
            assert(index < ProcessedLineCount);
            _indexedLogReader.GetLine(index)
        }
        
        public FullPath : string { get; private set; }
        public Header : string { get; private set; }
        public ProcessedLineCount : int { get; private set; }            
        public FileSize : long { get; private set; }
        public LoadedPercent : double { get; private set; } // form 0 to 100
        public IsLoaded : bool { get; private set; }
        
        public event Loaded : EventHandler;
        
        public Dispose() : void
        {
            _sequentalLogReader.Dispose();
            _indexedLogReader.Dispose();
        }
        
        public LoadAsync() : void
        {
            _ = Task.Factory.StartNew(Load);
        }
        
        private Load() : void
        {
            assert(!IsLoaded);
            foreach (line in _sequentalLogReader)
            {
                _lineConsumers.Iter( x => x.Process( line ) );
                def index = _lineIndex.AddNextLine(line.Offset);
                _indexedLineConsumers.Iter( x => x.Process(line, index) );
                ++ProcessedLineCount;
                LoadedPercent = (line.Offset:double) / FileSize;
            }
            LoadedPercent  = 100;
            IsLoaded = true;
            Loaded(this, EventArgs.Empty);            
        }

        private _lineConsumers : IEnumerable[ILineConsumer];
        private _indexedLineConsumers : IEnumerable[IIndexedLineConsumer];
        private _sequentalLogReader : SequentalLogReader;
        private _lineIndex : LineIndex;
        private _indexedLogReader : IndexedLogReader;
    }
}
