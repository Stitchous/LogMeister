using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.ComputationExpressions;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;

namespace LogMeister.LogView.DataVirtualization
{
	[NotifyPropertyChanged]
	public class VirtualList[T] : IList[T], IList, INotifyCollectionChanged 
	{
		public this([NotNull] itemProvider : IItemProvider[T])
		{
			_itemProvider = itemProvider;
			_count = Lazy(() => _itemProvider.FetchCount());
			CollectionChanged += (_, _) => {};
			_itemProvider.CountChanged += 
				newCount =>
				{
					_count = Lazy(() => newCount);
					_pageCache.Clear();
					RaisePropertyChanged(Count);
					CollectionChanged(this, NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset))
				}
		}

		public GetEnumerablor() : IEnumerator[T]
			implements IEnumerable[T].GetEnumerator
		{
			foreach (index in [0 .. Count])
			{
				yield (this : IList[T])[index]
			}
		}

		public NonGenericGetEnumerator() : IEnumerator
			implements IEnumerable.GetEnumerator
		{
			foreach (index in [0 .. Count])
			{
				yield (this : IList[T])[index] : object
			}
		}

		public Remove(_ : T) : bool
		{
			throw NotSupportedException()
		}

		public CopyTo(_ : array[T], _ : int) : void
			implements System.Collections.Generic.ICollection[T].CopyTo
		{
			throw NotSupportedException()
		}

		public Contains(_ : T) : bool
			implements System.Collections.Generic.ICollection[T].Contains
		{
			throw NotSupportedException()
		}

		public Clear() : void
		{
			throw NotSupportedException()
		}

		public Add(_ : T) :  void
		{
			throw NotSupportedException()
		}

		public IsReadOnly : bool
		{
			get { throw NotSupportedException() }
		}

		public Count : int
		{
			get { _count.Value }
		}

		public RemoveAt(_ : int) : void
		{
			throw NotSupportedException()
		}

		public Insert(_ : int, _ : T) : void
			implements System.Collections.Generic.IList[T].Insert
		{
			throw NotSupportedException()
		}

		public IndexOf(t : T) : int
			implements System.Collections.Generic.IList[T].IndexOf
		{
			def page = _pageCache.FirstOrDefault(p => p.Value[0].Contains(t));

			if (page.Value[0] == null)
                -1
			else
			page.Value[0].IndexOf(t)
		}

		[NotifyChangedOptions(HideSelfChanges)]
		public Item[index : int] : T
			implements IList[T].Item
		{
			get 
			{ 
				if (Count == 0) 
					default(T)
				else
				{
					def (pageIndex, page) = QueryPage(index);
					page[pageIndex]
				}
			}
			
			set 
			{ 
				ignore(value);
				ignore(index);
				throw NotSupportedException() 
			}
		}

		public Remove(_ : object) : void
		{
			throw NotSupportedException() 
		}

		public CopyTo(_ : Array, _ : int) : void
			implements ICollection.CopyTo
		{
			throw NotSupportedException() 
		}

		public Contains(_ : object) : bool
			implements System.Collections.IList.Contains
		{
			true;
		}

		public Add(_ : object) : int
		{
			throw NotSupportedException() 
		}

		public Insert(_ : int, _ : object) : void
			implements System.Collections.IList.Insert
		{
			throw NotSupportedException() 
		}

		public IndexOf(item : object) : int
			implements System.Collections.IList.IndexOf
		{
			def page = _pageCache.FirstOrDefault(p => p.Value[0].Contains(item));

			if (page.Value[0] == null)
                -1
			else
			{
				page.Value[0].IndexOf(item :> T)
			}
		}

		public Item[_ : int] : object
			implements IList.Item
		{
			set { _ = value; throw NotSupportedException() }
		}

		public IsSynchronized : bool
		{
			get { throw NotSupportedException() }
		}

		public SyncRoot : bool
		{
			get { throw NotSupportedException() }
		}

		public IsFixedSize : bool
		{
			get { throw NotSupportedException() }
		}

		public Insert(_ : object) : int
		{
			throw NotSupportedException()
		}

		public event CollectionChanged : NotifyCollectionChangedEventHandler;

		private QueryPage(index : int) : (int * IList[T])
		{
			def pageIndex = index / PageSize;
			def pageStart = pageIndex * PageSize;

			mutable pageWithGeneration;

			if (_pageCache.TryGetValue(pageIndex, out pageWithGeneration))
			(index - pageStart, pageWithGeneration[0])
			else
			{
				def tempPage = _itemProvider.Fetch(pageStart, Math.Min(pageStart + PageSize - 1, Count-1));
				assert(tempPage.Count <= PageSize);
				
				_pageCache[pageIndex] = (tempPage, pageCounter);
				pageCounter ++;

				CleanupCache();

				(index - pageStart, tempPage);
			}
		}

		private CleanupCache() : void
		{
			while (_pageCache.Count > MaxCacheSize)
			{
				def oldestKey = _pageCache.OrderBy(pair => pair.Value[1]).First().Key;
				_ = _pageCache.Remove(oldestKey);
			}
		}

		private _pageCache : Dictionary[int, (IList[T] * int)] = Dictionary.[int, (IList[T] * int)]();
		private _itemProvider : IItemProvider[T];
		private mutable _count : Lazy[int];

		static mutable pageCounter : int;
		static PageSize = 100;
		static MaxCacheSize = 10;

	}
}
