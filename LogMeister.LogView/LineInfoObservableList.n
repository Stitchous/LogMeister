using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

using LogMeister.Module.Core;

namespace LogMeister.LogView
{

    public class LineInfoObservableList : IList, INotifyCollectionChanged, INotifyPropertyChanged
    {
        private class SimpleMonitor : IDisposable 
        {
            public Enter() : void
            { 
              ++ _busyCount;
            } 

            public Dispose() : void
            {
              -- _busyCount; 
            }

            public  Busy : bool { get { _busyCount > 0; } } 

            private mutable _busyCount : int; 
        }

        public this(lineProvider : IIndexedLineProvider)
        {
            _lineProvider = lineProvider;
            Count = 0;
        }

        public UpdateCount(newCount : int) : void
        {
            when (newCount > Count)
            {
                CheckReentrancy();

                Count = newCount;

                OnPropertyChanged(PropertyChangedEventArgs("Count"));
                OnPropertyChanged(PropertyChangedEventArgs("Item[]"));
                OnCollectionChanged(NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));
            }
        }      

        public IndexOf(value : object) : int
        {
            def lineViewModel = value :> LineViewModel;
            lineViewModel.Index;
        }

        public Item[index : int] : object
        {
            get
            {
                LineViewModel(index, () => _lineProvider.GetLine(index));
            }

            set
            {
                throw NotSupportedException();
            }
        }

        public Count : int { get; set; }
        
        public SyncRoot : object
        {
            get
            {
                if (_syncRoot == null)
                {
                    _ = System.Threading.Interlocked.CompareExchange(ref _syncRoot, object(), null);
                    _syncRoot;
                }
                else
                {
                    _syncRoot;
                }
            }
        }

        public GetEnumerator() : IEnumerator
        {
            NullEnumerator();
        }

        public Contains(_ : object) : bool
        {
            true;
        }

        public Add(_ : object) : int
        {
            throw NotImplementedException();
        }

        public Clear() : void
        {
            throw NotImplementedException();
        }

        public Insert(_ : int, _ : object) : void
        {
            throw NotImplementedException();
        }

        public IsFixedSize : bool
        {
            get { throw NotImplementedException(); }
        }

        public IsReadOnly : bool
        {
            get { throw NotImplementedException(); }
        }

        public Remove(_ : object) : void
        {
            throw NotImplementedException();
        }

        public RemoveAt(_ : int) : void
        {
            throw NotImplementedException();
        }

        public CopyTo(_ : Array, _ : int) : void
        {
            throw NotImplementedException();
        }

        public IsSynchronized : bool
        {
            get { throw NotImplementedException(); }
        }

        public event CollectionChanged : NotifyCollectionChangedEventHandler;
        public event PropertyChanged : PropertyChangedEventHandler;

        protected virtual OnPropertyChanged(e : PropertyChangedEventArgs) : void
        { 
            when (PropertyChanged != null)
            {
                PropertyChanged(this, e);
            } 
        }

        protected virtual OnCollectionChanged(e : NotifyCollectionChangedEventArgs) : void
        {
            when (CollectionChanged != null) 
            { 
                using (BlockReentrancy())
                { 
                    CollectionChanged(this, e);
                }
            }
        } 

        protected BlockReentrancy() : IDisposable
        {
            _monitor.Enter();
            _monitor; 
        }

        protected CheckReentrancy() : void
        {
            when (_monitor.Busy)
            { 
                // we can allow changes if there's only one listener - the problem
                // only arises if reentrant changes make the original event args 
                // invalid for later listeners.  This keeps existing code working 
                // (e.g. Selector.SelectedItems).
                when ((CollectionChanged != null)  && (CollectionChanged.GetInvocationList().Length > 1)) 
                {
                    throw InvalidOperationException();
                }
            }
        }


        private _monitor : SimpleMonitor = SimpleMonitor();

        private mutable _syncRoot : object;
        private _lineProvider : IIndexedLineProvider;
    }
}
