using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Windows.Threading;
using System.Threading;
using System.Linq;

using Nemerle.Extensions;

using LogMeister.Module.Core;
using LogMeister.LogView.Document;
using LogMeister.Infrastructure;
using LogMeister.LogView.DataVirtualization;

namespace LogMeister.LogView
{
    [NotifyPropertyChanged]
    public class LogViewModel : ILogNavigation, ILogSelection, ILogFilter
    {
        public this(documentManager : Document.DocumentManager)
        {
            documentManager.CurrentDocumentChanged += (_, newDocument) => 
                {
                    _lineProvider = newDocument.Value.LineProvider;
                    _logInfo      = newDocument.Value.LogInfo;
                     
                     ResetLines();
                    
					_timer = WeakDispatcherTimer((_,_) => 
						ResetLines(), 
						TimeSpan.FromSeconds(2));
                    
                    _logInfo.Loaded += (_,_) => 
                    {
                        _timer.Stop();
                    }
                }
        }

        public Lines : VirtualList[LineViewModel] { get; private set;}
        
        public SetLineFilter(filter : IEnumerable[int]) : void
        {
            Lines = VirtualList(FilteredLinesProvider(filter, _lineProvider));
        }

        public ResetFilter() : void
        {
        	ResetLines()
        }

        public Select(line : IEnumerable[long]) : void
        {
        }

        public NavigateTo(position : long) : void
        {}


        private ResetLines() : void
        {
			Lines = VirtualList(OriginalLineProvider(_lineProvider, _logInfo));
        }
        private mutable _lineProvider : IIndexedLineProvider;
        private mutable _logInfo      : ILogInfo;
        private mutable _timer : WeakDispatcherTimer;
        private mutable _searchText : string;
    }   
}
