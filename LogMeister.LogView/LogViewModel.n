using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Windows.Threading;
using System.Threading;
using System.Linq;

using Nemerle.Extensions;

using LogMeister.Module.Core;
using LogMeister.LogView.Document;
using LogMeister.Infrastructure;

namespace LogMeister.LogView
{
    [NotifyPropertyChanged]
    public class LogViewModel 
    {
        public this(documentManager : Document.DocumentManager, indexer : LogMeister.Index.Indexer)
        {
            _indexer = indexer;
            documentManager.CurrentDocumentChanged += (_, newDocument) => 
                {
                    _lineProvider = newDocument.Value.LineProvider;
                    _logInfo      = newDocument.Value.LogInfo;
                    Lines         = LineInfoObservableList(_lineProvider);
                    
                    _timer = WeakDispatcherTimer((_, _) => 
                        Lines.UpdateCount(_logInfo.ProcessedLineCount), TimeSpan.FromSeconds(1));
                    _logInfo.Loaded += (_,_) => _timer.Stop();
                }
        }
    
        public Lines : LineInfoObservableList { get; private set;}
        
        public SearchText : string 
        { 
            get 
            {
                _searchText;
            }; 
            
            set
            {
                _searchText = value;
                when (!string.IsNullOrEmpty(value))
                {    
                    def v = _indexer.Search(value);
                    Console.WriteLine(v);
                }
            }
        }
        
        private mutable _lineProvider : IIndexedLineProvider;
        private mutable _logInfo      : ILogInfo;
        private mutable _timer : WeakDispatcherTimer;
        private mutable _searchText : string;
        
        private _indexer : LogMeister.Index.Indexer;
    }   
}
